<?xml version="1.0" encoding="UTF-8"?><oai_dc:dc xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/">
    <dc:contributor>Navarro Tabernero, Denis</dc:contributor>
    <dc:creator>Lozano Romeo, Luis</dc:creator>
    <dc:date>2019</dc:date>
    <dc:description>Este trabajo de fin de grado consiste en observar los beneficios de utilizar un menor tamaño de palabra para la cuantificación de los pesos en una red neuronal convolucional, o en inglés Convolutional Neuronal Network, sin perder eficiencia y precisión. Por ello se ha decidido utilizar para su implementación una FPGA donde podemos trabajar a nivel de bit. En la mayoría de ocasiones que se encuentran propuestas de optimizaciones para redes neuronales artificiales se nos ofrece la posibilidad de reducir el número de filtros en las capas convolucionales o de neuronas en la capa fully conected, o de añadir más capas reduciendo su tamaño o viceversa. Pero rara vez se ha tratado de encontrar una solución a dichas optimizaciones mediante la reducción del tamaño de palabra para agilizar tiempos y costes de recursos. La red neuronal utilizada ha sido LeNet, que consta de siete capas de los tipos convolucional (Conv), relu, full conected (FC) y max pooling (max). Esta red junto con la base de datos MNIST se encarga de identificar en una imagen un número del 0 al 9. Para poder realizarlo, se han llevado a cabo una serie de procesos en los cuales se han utilizado herramientas como Caffe Ristretto, GuinnessMaster y Vivado HLS. La primera de ellas ha sido necesaria para poder entrenar la red y obtener los pesos cuantificados con el menor tamaño posible sin perder eficiencia en la red. Mediante GuinnessMaster se ha obtenido una plantilla de la red y sus capas en C sintetizable que nos ha permitido dar forma a dicha red. Por último, mediante Vivado HLS, hemos conseguido traducir a VHDL la red en C para poder introducirla en una FPGA y poder comprobar su tiempo de ejecución, área de silicio utilizada y parámetros de memoria que nos definirán lo útil que puede llegar a ser nuestra propuesta.&lt;br /&gt;</dc:description>
    <dc:identifier>http://zaguan.unizar.es/record/85375</dc:identifier>
    <dc:language>spa</dc:language>
    <dc:publisher>Universidad de Zaragoza; Departamento de Ingeniería Electrónica y Comunicaciones; Área de Tecnología Electrónica</dc:publisher>
    <dc:relation>http://zaguan.unizar.es/record/85375/files/TAZ-TFG-2019-2107.pdf</dc:relation>
    <dc:rights>http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:rights>
    <dc:subject>Graduado en Ingeniería de Tecnologías y Servicios de Telecomunicación</dc:subject>
    <dc:title>Implementación con FPGA de redes neuronales binarias</dc:title>
    <dc:type>TAZ-TFG</dc:type>
    <dc:title xml:lang="en">FPGA-based accelerator for Binary Neural Network</dc:title>
</oai_dc:dc>
